{"ast":null,"code":"var _jsxFileName = \"/home/mshahzaib/Desktop/upworkRobinKohzeProject/walletProject/wallet/components/settings/DbSecrets.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport firebase from \"../../config/fire-conf\";\nimport Link from \"../common/ActiveLink\";\nimport { Menu, Dropdown, Popconfirm } from \"antd\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { ToastContainer, toast } from \"react-toastify\";\nconst useStyles = makeStyles(theme => ({\n  tableHead: {\n    backgroundColor: \"#00152921\"\n  }\n}));\n\nfunction DbSecrets(props) {\n  const router = useRouter();\n  const classes = useStyles();\n\n  const newApiMenu = __jsx(Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(Menu.Item, {\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, \"Database\"), props.dbList.map((ele, index) => {\n    return __jsx(Menu.Item, {\n      key: ele.dbId + index,\n      onClick: () => addNewApi(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }\n    }, ele.dbName);\n  }));\n\n  const addNewApi = index => {\n    let modefiedObj = [...props.dbList];\n    let changes = [];\n\n    if (modefiedObj[index].apiSecretKeys) {\n      changes = [...modefiedObj[index].apiSecretKeys, uuidv4()];\n    } else {\n      changes = [uuidv4()];\n    }\n\n    modefiedObj[index].apiSecretKeys = changes;\n    props.setdbList(modefiedObj); //updating data in firebase\n\n    firebase.firestore().doc(\"usersData/\" + props.userDataRedux.uid + \"/Databases/\" + props.dbList[index].dbId).update({\n      apiSecretKeys: changes\n    });\n  };\n\n  function confirmDelete(index1, index2) {\n    let modefiedObj = [...props.dbList];\n    let changes = [];\n\n    if (modefiedObj[index1].apiSecretKeys && modefiedObj[index1].apiSecretKeys.length > 1) {\n      changes = modefiedObj[index1].apiSecretKeys.splice(index2, 1);\n    }\n\n    modefiedObj[index1].apiSecretKeys = changes;\n    props.setdbList(modefiedObj); //updating data in firebase\n\n    firebase.firestore().doc(\"usersData/\" + props.userDataRedux.uid + \"/Databases/\" + props.dbList[index1].dbId).update({\n      apiSecretKeys: changes\n    });\n    toast.info(\"Item deleted Successfully\", {\n      position: \"bottom-left\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true\n    });\n  }\n\n  return __jsx(\"section\", {\n    className: \"blog-details-area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"col-lg-12 col-md-12\",\n    style: {\n      margin: \"0px auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"blog-details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"article-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, __jsx(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, \"Database Secrets\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, \"Api Secret Keys are used to authenticate user api. You can use Secret Api Keys with you User Api Key and Database Id to acess your MetaShard Database data.app receives this token and uses it to authenticate with Firebase.At least one secret must exist at all times\"), __jsx(\"div\", {\n    className: \"normal-button\",\n    style: {\n      float: \"right\",\n      margin: \"20px 0px 10px 0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }, __jsx(Dropdown, {\n    overlay: newApiMenu,\n    placement: \"bottomCenter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, __jsx(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 19\n    }\n  }, \"Add new Api Secret Key\"))), __jsx(\"div\", {\n    style: {\n      margin: \"30px 0px 20px 0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, __jsx(TableContainer, {\n    component: Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, __jsx(Table, {\n    className: classes.table,\n    \"aria-label\": \"simple table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 19\n    }\n  }, __jsx(TableHead, {\n    classes: {\n      root: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 23\n    }\n  }, __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 25\n    }\n  }, \"Database\"), __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 25\n    }\n  }, \"Database Id\"), __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 25\n    }\n  }, \"Secret Api Key\"), __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 25\n    }\n  }))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }\n  }, props.dbList.map((dbEle, index1) => {\n    return dbEle.apiSecretKeys && dbEle.apiSecretKeys.map((apiKey, index2) => __jsx(TableRow, {\n      key: apiKey + index2 + index1,\n      hover: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 29\n      }\n    }, __jsx(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 31\n      }\n    }, dbEle.dbName), __jsx(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 31\n      }\n    }, dbEle.dbId), __jsx(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 31\n      }\n    }, apiKey), __jsx(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 31\n      }\n    }, __jsx(Popconfirm, {\n      placement: \"top\",\n      title: \"Are you sure to delete this Api Secret Key?\",\n      onConfirm: () => confirmDelete(index1, index2),\n      okText: \"Yes\",\n      cancelText: \"No\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 33\n      }\n    }, __jsx(IconButton, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 35\n      }\n    }, __jsx(DeleteIcon, {\n      fontSize: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 37\n      }\n    })), \" \"))));\n  }), props.dbList && props.dbList.apiSecretKeys && props.dbList.apiSecretKeys.map((row, index) => __jsx(TableRow, {\n    key: row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 27\n    }\n  }, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 29\n    }\n  }, props.dbList[index].dbName), __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 29\n    }\n  }, props.dbList[index].dbId), __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 29\n    }\n  }, row))))))))))), __jsx(ToastContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default DbSecrets;","map":{"version":3,"sources":["/home/mshahzaib/Desktop/upworkRobinKohzeProject/walletProject/wallet/components/settings/DbSecrets.js"],"names":["React","useState","useEffect","useRouter","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","makeStyles","firebase","Link","Menu","Dropdown","Popconfirm","v4","uuidv4","IconButton","DeleteIcon","ToastContainer","toast","useStyles","theme","tableHead","backgroundColor","DbSecrets","props","router","classes","newApiMenu","dbList","map","ele","index","dbId","addNewApi","dbName","modefiedObj","changes","apiSecretKeys","setdbList","firestore","doc","userDataRedux","uid","update","confirmDelete","index1","index2","length","splice","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","margin","float","table","root","dbEle","apiKey","row"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport firebase from \"../../config/fire-conf\";\nimport Link from \"../common/ActiveLink\";\nimport { Menu, Dropdown, Popconfirm } from \"antd\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nconst useStyles = makeStyles((theme) => ({\n  tableHead: {\n    backgroundColor: \"#00152921\",\n  },\n}));\n\nfunction DbSecrets(props) {\n  const router = useRouter();\n  const classes = useStyles();\n\n  const newApiMenu = (\n    <Menu>\n      <Menu.Item disabled>Database</Menu.Item>\n      {props.dbList.map((ele, index) => {\n        return (\n          <Menu.Item key={ele.dbId + index} onClick={() => addNewApi(index)}>\n            {ele.dbName}\n          </Menu.Item>\n        );\n      })}\n    </Menu>\n  );\n\n  const addNewApi = (index) => {\n    let modefiedObj = [...props.dbList];\n    let changes = [];\n    if (modefiedObj[index].apiSecretKeys) {\n      changes = [...modefiedObj[index].apiSecretKeys, uuidv4()];\n    } else {\n      changes = [uuidv4()];\n    }\n    modefiedObj[index].apiSecretKeys = changes;\n    props.setdbList(modefiedObj);\n\n    //updating data in firebase\n    firebase\n      .firestore()\n      .doc(\n        \"usersData/\" +\n          props.userDataRedux.uid +\n          \"/Databases/\" +\n          props.dbList[index].dbId\n      )\n      .update({\n        apiSecretKeys: changes,\n      });\n  };\n\n  function confirmDelete(index1, index2) {\n    let modefiedObj = [...props.dbList];\n    let changes = [];\n\n    if (\n      modefiedObj[index1].apiSecretKeys &&\n      modefiedObj[index1].apiSecretKeys.length > 1\n    ) {\n      changes = modefiedObj[index1].apiSecretKeys.splice(index2, 1);\n    }\n    modefiedObj[index1].apiSecretKeys = changes;\n    props.setdbList(modefiedObj);\n\n    //updating data in firebase\n    firebase\n      .firestore()\n      .doc(\n        \"usersData/\" +\n          props.userDataRedux.uid +\n          \"/Databases/\" +\n          props.dbList[index1].dbId\n      )\n      .update({\n        apiSecretKeys: changes,\n      });\n\n    toast.info(\"Item deleted Successfully\", {\n      position: \"bottom-left\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n    });\n  }\n\n  return (\n    <section className=\"blog-details-area\">\n      <div className=\"row\">\n        <div className=\"col-lg-12 col-md-12\" style={{ margin: \"0px auto\" }}>\n          <div className=\"blog-details\">\n            <div className=\"article-content\">\n              <h5>Database Secrets</h5>\n              <p>\n                Api Secret Keys are used to authenticate user api. You can use\n                Secret Api Keys with you User Api Key and Database Id to acess\n                your MetaShard Database data.app receives this token and uses it\n                to authenticate with Firebase.At least one secret must exist at\n                all times\n              </p>\n              <div\n                className=\"normal-button\"\n                style={{ float: \"right\", margin: \"20px 0px 10px 0px\" }}\n              >\n                <Dropdown overlay={newApiMenu} placement=\"bottomCenter\">\n                  <button>Add new Api Secret Key</button>\n                </Dropdown>\n              </div>\n\n              <div style={{ margin: \"30px 0px 20px 0px\" }}>\n                <TableContainer component={Paper}>\n                  <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead\n                      classes={{\n                        root: classes.tableHead,\n                      }}\n                    >\n                      <TableRow>\n                        <TableCell>Database</TableCell>\n                        <TableCell>Database Id</TableCell>\n                        <TableCell>Secret Api Key</TableCell>\n                        <TableCell></TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {props.dbList.map((dbEle, index1) => {\n                        return (\n                          dbEle.apiSecretKeys &&\n                          dbEle.apiSecretKeys.map((apiKey, index2) => (\n                            <TableRow key={apiKey + index2 + index1} hover>\n                              <TableCell component=\"th\" scope=\"row\">\n                                {dbEle.dbName}\n                              </TableCell>\n                              <TableCell>{dbEle.dbId}</TableCell>\n                              <TableCell>{apiKey}</TableCell>\n                              <TableCell>\n                                <Popconfirm\n                                  placement=\"top\"\n                                  title=\"Are you sure to delete this Api Secret Key?\"\n                                  onConfirm={() =>\n                                    confirmDelete(index1, index2)\n                                  }\n                                  okText=\"Yes\"\n                                  cancelText=\"No\"\n                                >\n                                  <IconButton size=\"small\">\n                                    <DeleteIcon fontSize=\"small\" />\n                                  </IconButton>{\" \"}\n                                </Popconfirm>\n                              </TableCell>\n                            </TableRow>\n                          ))\n                        );\n                      })}\n                      {props.dbList &&\n                        props.dbList.apiSecretKeys &&\n                        props.dbList.apiSecretKeys.map((row, index) => (\n                          <TableRow key={row}>\n                            <TableCell component=\"th\" scope=\"row\">\n                              {props.dbList[index].dbName}\n                            </TableCell>\n                            <TableCell>{props.dbList[index].dbId}</TableCell>\n                            <TableCell>{row}</TableCell>\n                          </TableRow>\n                        ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <ToastContainer />\n    </section>\n  );\n}\n\nexport default DbSecrets;\n"]},"metadata":{},"sourceType":"module"}